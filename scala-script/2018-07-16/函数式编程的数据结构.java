/*
函数式编程的数据结构
不同的语言有不同的核心数据结构，但大致都包含同一个子集，子集中包含列表（list）
、向量（vector）等序列型集合
数组（array）、映射（map）与集合（set）。
每一种类型都支持同一批无副作用的高阶函数，称为组合器（combinator）
*/

//序列:顾名思义，该数据结构按特定的顺序访问
/*collection.Seq是一个trait，是所有可变或不可变序列类型的抽象
列表也是一种序列，是函数式编程中最常用的数据结构，从第一代函数式语言Lisp就开始用列表了
通常，向列表里追加元素时，该元素会被追加到列表的开头，称为新列表的“头部”。
除了头部，剩下的部分就是原列表的元素，这些元素并没有被修改，它们
变成了新列表的“尾部”
*/
val list1 = List("Programming","Scala")
val list2 = "People" :: "should" :: "read" :: list1
/*
你可以用List.apply方法创建队列，然后用::方法（称为cons，意为构造）
向队列头部追加数据，从而创建新的列表。在这里我们使用了简单写法，省略了点号与小括号。
我们提到过，以冒号（:）结尾的方法向右结合，因此 x::list其实就是list.::(x)
我们也可以用::方法向Nil空队列追加元素创建新队列
*/
//Nil与List.empty[Nothing]是等价的，其中Nothing是Scala中所有其它类型的子类型。
另外，你还可以用++方法将两个列表（或其它任何序列类型）连接起来
val list5 = list4 ++ list3
 
